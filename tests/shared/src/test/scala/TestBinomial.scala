/*
 * Copyright 2023 dragonfly.ai
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import ai.dragonfly.math.stats.probability.distributions.{EstimatedBinomial, Binomial, stream}

class TestBinomial extends munit.FunSuite:

  test("binomial.p(x)") {

    /*
     * Generated by https://www.mathworks.com/help/stats/binopdf.html
     * y = binopdf(0:10, 10, 0.5)
     * fprintf('%9.9G\n', y)
     */

    val dist1 = Binomial(10L, 0.5)
    assertEqualsDouble(dist1.p(0), 0.0009765625, 0.000000001)
    assertEqualsDouble(dist1.p(1), 0.009765625, 0.000000001)
    assertEqualsDouble(dist1.p(2), 0.0439453125, 0.000000001)
    assertEqualsDouble(dist1.p(3), 0.1171875, 0.000000001)
    assertEqualsDouble(dist1.p(4), 0.205078125, 0.000000001)
    assertEqualsDouble(dist1.p(5), 0.24609375, 0.000000001)
    assertEqualsDouble(dist1.p(6), 0.205078125, 0.000000001)
    assertEqualsDouble(dist1.p(7), 0.1171875, 0.000000001)
    assertEqualsDouble(dist1.p(8), 0.0439453125, 0.000000001)
    assertEqualsDouble(dist1.p(9), 0.009765625, 0.000000001)
    assertEqualsDouble(dist1.p(10), 0.0009765625, 0.000000001)
  }

  test("estimate binomial") {

    val n:Long = 10L
    val p:Double = 0.25

    val mean = n * p
    val variance = mean * 0.75

    val b0 = Binomial(n, p)

    assertEqualsDouble(b0.μ, mean, 0.00001)
    assertEqualsDouble(b0.`σ²`, variance, 0.00001)

    val sB:stream.Binomial = stream.Binomial()
    var i:Int = 0; while (i < 10000) {
      val rs:Long = b0.random()
      sB.observe(rs, 10L)
      i += 1
    }

    val eB:EstimatedBinomial = sB.estimate

    assertEqualsDouble(eB.μ, mean, 0.1)
    assertEqualsDouble(eB.`σ²`, variance, 0.1)

  }

end TestBinomial