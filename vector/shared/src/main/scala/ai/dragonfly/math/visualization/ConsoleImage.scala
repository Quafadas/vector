package ai.dragonfly.math.visualization

import ai.dragonfly.math.*
import Random.*
import example.Demonstrable
import vector.*
import geometry.Line
import visualization.ConsoleImage.{BLACK, GRAY, WHITE, colorBytes}

object ConsoleImage extends Demonstrable {

/*
тгЙ╠А 	тгЙ╠Б 	тгЙ╠В 	тгЙ╠Г 	тгЙ╠Д 	тгЙ╠Е 	тгЙ╠Ж 	тгЙ╠З 	тгЙ╠И 	тгЙ╠Й 	тгЙ╠К 	тгЙ╠Л 	тгЙ╠М 	тгЙ╠Н 	тгЙ╠О 	тгЙ╠П
тгЙ╠Р 	тгЙ╠С 	тгЙ╠Т 	тгЙ╠У 	тгЙ╠Ф 	тгЙ╠Х 	тгЙ╠Ц 	тгЙ╠Ч 	тгЙ╠Ш 	тгЙ╠Щ 	тгЙ╠Ъ 	тгЙ╠Ы 	тгЙ╠Ь 	тгЙ╠Э 	тгЙ╠Ю 	тгЙ╠Я
тгЙ╠а 	тгЙ╠б 	тгЙ╠в 	тгЙ╠г 	тгЙ╠д 	тгЙ╠е 	тгЙ╠ж 	тгЙ╠з 	тгЙ╠и 	тгЙ╠й 	тгЙ╠к 	тгЙ╠л 	тгЙ╠м 	тгЙ╠н 	тгЙ╠о 	тгЙ╠п
тгЙ╠░ 	тгЙ╠▒ 	тгЙ╠▓ 	тгЙ╠│ 	тгЙ╠┤ 	тгЙ╠╡ 	тгЙ╠╢ 	тгЙ╠╖ 	тгЙ╠╕ 	тгЙ╠╣ 	тгЙ╠║ 	тгЙ╠╗ 	тгЙ╠╝ 	тгЙ╠╜ 	тгЙ╠╛ 	тгЙ╠┐
тгЙ═А 	тгЙ═Б 	тгЙ═В 	тгЙ═Г 	тгЙ═Д 	тгЙ═Е 	тгЙ═Ж 	тгЙ═З 	тгЙ═И 	тгЙ═Й 	тгЙ═К 	тгЙ═Л 	тгЙ═М 	тгЙ═Н 	тгЙ═О
тгЙ═Р 	тгЙ═С 	тгЙ═Т 	тгЙ═У 	тгЙ═Ф 	тгЙ═Х 	тгЙ═Ц 	тгЙ═Ч 	тгЙ═Ш 	тгЙ═Щ 	тгЙ═Ъ 	тгЙ═Ы 	тгЙ═ЬтгЙ 	тгЙ═ЭтгЙ 	тгЙ═ЮтгЙ 	тгЙ═ЯтгЙ
тгЙ═атгЙ 	тгЙ═бтгЙ 	тгЙ═втгЙ 	тгЙ═г 	тгЙ═д 	тгЙ═е 	тгЙ═ж 	тгЙ═з 	тгЙ═и 	тгЙ═й 	тгЙ═к 	тгЙ═л 	тгЙ═м 	тгЙ═н
тгЙс╖А 	тгЙс╖Б 	тгЙс╖В 	тгЙс╖Г 	тгЙс╖Д 	тгЙс╖Е 	тгЙс╖Ж 	тгЙс╖З 	тгЙс╖И 	тгЙс╖Й 	тгЙс╖К 	тгЙс╖Л 	тгЙс╖М 	тгЙс╖Н 	тгЙс╖О 	тгЙс╖П
тгЙтГР 	тгЙтГС 	тгЙтГТ 	тгЙтГУ 	тгЙтГФ 	тгЙтГХ 	тгЙтГЦ 	тгЙтГЧ 	тгЙтГШ 	тгЙтГЩ 	тгЙтГЪ 	тгЙтГЫ 	тгЙтГЬ 	тгЙтГЭ 	тгЙтГЮ 	тгЙтГЯ
тгЙтГа 	тгЙтГб 	тгЙтГв 	тгЙтГг 	тгЙтГд 	тгЙтГе 	тгЙтГж 	тгЙтГз 	тгЙ 	тгЙтГй 	тгЙтГк 	тгЙтГл 	тгЙтГм 	тгЙтГн 	тгЙтГо 	тгЙтГп
тгЙтГ░ 	тгЙс╖У 	тгЙс╖Ф 	тгЙс╖Х 	тгЙс╖Ц 	тгЙс╖Ч 	тгЙс╖Ш 	тгЙс╖Щ 	тгЙс╖Ъ 	тгЙс╖Ы 	тгЙс╖Ь 	тгЙс╖Э 	тгЙс╖Ю 	тгЙс╖Я  	тгЙ═о 	тгЙ═п
тгЙс╖а 	тгЙс╖б 	тгЙс╖в 	тгЙс╖г 	тгЙс╖д 	тгЙс╖е 	тгЙс╖ж 	тгЙс╖╝ 	тгЙс╖╜ 	тгЙс╖╛ 	тгЙс╖┐
тгЙя╕а 	тгЙя╕б 	тгЙя╕в 	тгЙя╕г 	тгЙя╕д 	тгЙя╕е 	тгЙя╕ж

═птгЙ═п

тГР 	тГС 	тГТ 	тГУ 	тГФ 	тГХ 	тГЦ 	тГЧ 	тГШ 	тГЩ 	тГЪ 	тГЫ 	тГЬ 	тГЭ 	тГЮ 	тГЯ   ═п
таАтГб 	таАс╖Г 	таАс╖Д 	таАс╖Е 	таАс╖Ж 	таАс╖З 	таАс╖И 	таАс╖Й 	таАс╖Л 	таАс╖М 	таАс╖О 	таАтГР 	таАтГС 	таАтГФ 	таАтГХ 	таАтГЦ 	таАтГЧ
таА═Л 	таА═М 	таАс╖А 	таАс╖Б 	таАтГЫ 	таАтГЬ 	тбЗя╕ж 	таАс╖а 	таАс╖б 	таАс╖в 	таАс╖г 	таАс╖д 	таАс╖е 	таАс╖ж 	таАс╖╛ 	таАя╕а 	таАя╕б 	таАя╕в 	таАя╕г 	таАя╕д 	тбЗя╕е
таАтГй 	таАтГ░ 	таАс╖У 	таАс╖Ф 	таАс╖Х 	таАс╖Ц 	таАс╖Ч 	таАс╖Ш 	таАс╖Щ 	таАс╖Ъ 	таАс╖Ы 	таАс╖Ь 	тбЗс╖Э 	таАс╖Ю 	таАс╖Я
таА═о 	таА═п 	таА═Р 	таА═С 	таА═Т 	таА═Ч 	таА═Ы 	таА═г 	таА═д 	таА═е 	таА═А 	таА═Б 	таА═В 	таА═Д 	таА═Ж 	таА═К 	таА═ж 	таА═з 	таА═и 	таА═й 	таА═к 	таА═л 	таА═м 	таА═н
таАтГк 	таАтГШ 	таАтГЩ 	таАтГЪ
таА═У 	таА═Ф 	тбЗ═Х 	таА═Ц 	тбЗ═Щ 	таА═Ъ 	таАс╖╝ 	таАс╖╜ 	таАс╖┐

таТтГЮ 	таТтГЯ 	таТтГа 	таТтГв 	таТтГг 	таТтГд
таТтГл 	таТтГе 	таТтГж 	таТтГз

 ═А═Б

*/

  val layerGlyphs:Array[String] = Array[String](
    //  "с╖О", "с╖А", "с╖Ш", "═Рс╖╛", "═Т", "═Б═А", "═г═Ъ═Ъ", "═В", "═ж═ж═ж═ж", "═и═и═и═и═и", "с╖Г",
    "тГШ", "тГЯ", "тГЮ", "тГа"
  )

  val brailleBytes:Array[String] = Array[String](
    "таА", "таБ", "таВ", "таГ", "таД", "таЕ", "таЖ", "таЗ", "тбА", "тбБ", "тбВ", "тбГ", "тбД", "тбЕ", "тбЖ", "тбЗ", "таИ", "таЙ", "таК", "таЛ", "таМ", "таН", "таО", "таП", "тбИ", "тбЙ", "тбК", "тбЛ", "тбМ", "тбН", "тбО", "тбП", "таР", "таС", "таТ", "таУ", "таФ", "таХ", "таЦ", "таЧ", "тбР", "тбС", "тбТ", "тбУ", "тбФ", "тбХ", "тбЦ", "тбЧ", "таШ", "таЩ", "таЪ", "таЫ", "таЬ", "таЭ", "таЮ", "таЯ", "тбШ", "тбЩ", "тбЪ", "тбЫ", "тбЬ", "тбЭ", "тбЮ", "тбЯ", "таа", "таб", "тав", "таг", "тад", "тае", "таж", "таз", "тба", "тбб", "тбв", "тбг", "тбд", "тбе", "тбж", "тбз", "таи", "тай", "так", "тал", "там", "тан", "тао", "тап", "тби", "тбй", "тбк", "тбл", "тбм", "тбн", "тбо", "тбп", "та░", "та▒", "та▓", "та│", "та┤", "та╡", "та╢", "та╖", "тб░", "тб▒", "тб▓", "тб│", "тб┤", "тб╡", "тб╢", "тб╖", "та╕", "та╣", "та║", "та╗", "та╝", "та╜", "та╛", "та┐", "тб╕", "тб╣", "тб║", "тб╗", "тб╝", "тб╜", "тб╛", "тб┐", "твА", "твБ", "твВ", "твГ", "твД", "твЕ", "твЖ", "твЗ", "тгА", "тгБ", "тгВ", "тгГ", "тгД", "тгЕ", "тгЖ", "тгЗ", "твИ", "твЙ", "твК", "твЛ", "твМ", "твН", "твО", "твП", "тгИ", "тгЙ", "тгК", "тгЛ", "тгМ", "тгН", "тгО", "тгП", "твР", "твС", "твТ", "твУ", "твФ", "твХ", "твЦ", "твЧ", "тгР", "тгС", "тгТ", "тгУ", "тгФ", "тгХ", "тгЦ", "тгЧ", "твШ", "твЩ", "твЪ", "твЫ", "твЬ", "твЭ", "твЮ", "твЯ", "тгШ", "тгЩ", "тгЪ", "тгЫ", "тгЬ", "тгЭ", "тгЮ", "тгЯ", "тва", "тва", "твв", "твг", "твд", "тве", "твж", "твз", "тга", "тгб", "тгв", "тгг", "тгд", "тге", "тгж", "тгз", "тви", "твй", "твк", "твл", "твм", "твн", "тво", "твп", "тги", "тгй", "тгк", "тгл", "тгм", "тгн", "тго", "тгп", "тв░", "тв▒", "тв▓", "тв│", "тв┤", "тв╡", "тв╢", "тв╖", "тг░", "тг▒", "тг▓", "тг│", "тг┤", "тг╡", "тг╢", "тг╖", "тв╕", "тв╣", "тв║", "тв╗", "тв╝", "тв╜", "тв╛", "тв┐", "тг╕", "тг╣", "тг║", "тг╗", "тг╝", "тг╜", "тг╛", "тг┐",
  )

  // Red + Green = Yellow
  // Red + Blue = Magenta
  // Green + Blue = Cyan
  // Red + Green + Blue = White

  val BLACK:Int = 0
  val RED:Int = 1
  val GREEN:Int = 2
  val YELLOW:Int = 3
  val BLUE:Int = 4
  val MAGENTA:Int = 5
  val CYAN:Int = 6
  val WHITE:Int = 7
  val GRAY:Int = 8

  val colorBytes:Array[String] = Array[String](
    Console.BLACK,
    Console.RED,
    Console.GREEN,
    Console.YELLOW,
    Console.BLUE,
    Console.MAGENTA,
    Console.CYAN,
    Console.RESET,
    Console.WHITE
  )

  def randomSpiral(ci:ConsoleImage, color:Int):ConsoleImage = {
    val p:Vector2 = defaultRandom.next(Vector2(ci.width, ci.height))
    val v:Vector2 = Vector2(1.0, 0.0)
    val s = 1.002 + (Math.random() * 0.0002)
    val dT:Double = (Math.random() - 0.5) * Math.PI / 100.0
    var pV:Vector2 = v.copy()
    val end = squareInPlace(ci.width) + squareInPlace(ci.height)
    while (v.magnitudeSquared < end){
      pV = p + v
      v.rotate(dT).scale(s)
      Line.trace2D(
        pV,
        p + v,
        (dX:Int, dY:Int) => {
          if (dX >= 0 && dX < ci.width) {
            if (dY >= 0 && dY < ci.height) {
              ci.setPixel(dX, dY, color)
            }
          }
        }
      )
    }
    ci
  }

  override def demo(implicit sb:StringBuilder = new StringBuilder()):StringBuilder = {
    val ci: ConsoleImage = new ConsoleImage(40, 200)
    for (i <- 0 until 7) {
      randomSpiral(ci, 1 << (i % 3))
    }
    sb.append(ci)

    sb
  }

  override def name: String = "ConsoleImage"

}

class ConsoleImage(val width:Int, val height:Int) {

  import Console.{BOLD, RESET}

  private val w:Int = width >> 1   // width / 2
  private val h:Int = height >> 2  // height / 4

  val pixelCount:Int = w * (h + 1)

  inline def linearIndexOf(x: Int, y: Int): Int = {
    var out = -1
    if (x > -1) {  // && y > -1  // left out y positive check because negative y will always cause negative output
      val x0 = x >> 1
      if (x0 < w) {
        val y0 = y >> 2
        if (y0 < h ) out = x0 + (y0 * w)
      }
    }
    out
  }

  val pixels:Array[Int] = Array.fill(pixelCount)(0)

  val layer:Array[String] = Array.fill(pixelCount)("")

  def setPixel(x:Int, y:Int, color:Int):ConsoleImage = {
    val i:Int = linearIndexOf(x, y)
    if (i > -1) {
      pixels(i) = pixels(i) | ((color << 16) | ((1 << (y % 4)) << (x % 2 * 4)))
      // erasing? (if (color == K) pixels(i) & ~byte else pixels(i) | byte)
    }
    this
  }

  def setGlyph(x:Int, y:Int, glyph:String, color:Int):ConsoleImage = {
    val i:Int = linearIndexOf(x, y)
    if (i > -1) {
      layer(i) = layer(i) + glyph
      pixels(i) = pixels(i) | (color << 16)
    }
    this
  }

  def lines:Array[String] = {
    val out:Array[String] = new Array[String](h)
    for (y <- 0 until h) {
      var lastColor:Int = 0
      val sb:StringBuilder = StringBuilder()
      for (x <- 0 until w) {
        val bytes = pixels((y * w) + x)
        var color = bytes >> 16
        if (color > WHITE) {
          color = color & WHITE
        }
        if (color < 1) color = ConsoleImage.colorBytes.length - 1
        val pattern = bytes & 0x000000ff
        if (color == lastColor || color == 0) {
          sb.append(ConsoleImage.brailleBytes(pattern))
        } else {
          lastColor = color
          sb.append(ConsoleImage.colorBytes(color))
          sb.append(ConsoleImage.brailleBytes(pattern))
        }
        sb.append(layer((y * w) + x))
      }
      out(y) = sb.append(RESET).toString()
    }
    out
  }

  override def toString:String = {
    val sb:StringBuilder = StringBuilder()
    val ls:Array[String] = lines
    for (line <- ls) {
      sb.append(line).append("\n")
    }
    sb.toString()
  }
}

/* Unicode Braille Characters for Plotting:

таБ╠З таИтаВтаРсЫл┬╖ЁЭЖ║ЁЭЖ╣таДтаа.тбАтвА╠г [ тГШ][╠К ][таА═ж]
тЪАтЪБтЪВтЪГтЪДтЪЕ
ЁЯБгЁЯБдЁЯБеЁЯБжЁЯБзЁЯБиЁЯБй
ЁЯБкЁЯБлЁЯБмЁЯБнЁЯБоЁЯБпЁЯБ░
ЁЯБ▒ЁЯБ▓ЁЯБ│ЁЯБ┤ЁЯБ╡ЁЯБ╢ЁЯБ╖
ЁЯБ╕ЁЯБ╣ЁЯБ║ЁЯБ╗ЁЯБ╝ЁЯБ╜ЁЯБ╛
ЁЯБ┐ЁЯВАЁЯВБЁЯВВЁЯВГЁЯВДЁЯВЕ
ЁЯВЖЁЯВЗЁЯВИЁЯВЙЁЯВКЁЯВЛЁЯВМ
ЁЯВНЁЯВОЁЯВПЁЯВРЁЯВСЁЯВТЁЯВУ
ЁЯБв

ЁЯА▒ЁЯА▓ЁЯА│ЁЯА┤ЁЯА╡ЁЯА╢ЁЯА╖
ЁЯА╕ЁЯА╣ЁЯА║ЁЯА╗ЁЯА╝ЁЯА╜ЁЯА╛
ЁЯА┐ЁЯБАЁЯББЁЯБВЁЯБГЁЯБДЁЯБЕ
ЁЯБЖЁЯБЗЁЯБИЁЯБЙЁЯБКЁЯБЛЁЯБМ
ЁЯБНЁЯБОЁЯБПЁЯБРЁЯБСЁЯБТЁЯБУ
ЁЯБФЁЯБХЁЯБЦЁЯБЧЁЯБШЁЯБЩЁЯБЪ
ЁЯБЫЁЯБЬЁЯБЭЁЯБЮЁЯБЯЁЯБаЁЯБб
ЁЯА░

таАтаИтаРтаШтаатаита░та╕твАтвИтвРтвШтватвитв░тв╕
таБтаЙтаСтаЩтабтайта▒та╣твБтвЙтвСтвЩтватвйтв▒тв╣
таВтаКтаТтаЪтавтакта▓та║твВтвКтвТтвЪтввтвктв▓тв║
таГтаЛтаУтаЫтагталта│та╗твГтвЛтвУтвЫтвгтвлтв│тв╗
таДтаМтаФтаЬтадтамта┤та╝твДтвМтвФтвЬтвдтвмтв┤тв╝
таЕтаНтаХтаЭтаетанта╡та╜твЕтвНтвХтвЭтветвнтв╡тв╜
таЖтаОтаЦтаЮтажтаота╢та╛твЖтвОтвЦтвЮтвжтвотв╢тв╛
таЗтаПтаЧтаЯтазтапта╖та┐твЗтвПтвЧтвЯтвзтвптв╖тв┐
тбАтбИтбРтбШтбатбитб░тб╕тгАтгИтгРтгШтгатгитг░тг╕
тбБтбЙтбСтбЩтббтбйтб▒тб╣тгБтгЙтгСтгЩтгбтгйтг▒тг╣
тбВтбКтбТтбЪтбвтбктб▓тб║тгВтгКтгТтгЪтгвтгктг▓тг║
тбГтбЛтбУтбЫтбгтблтб│тб╗тгГтгЛтгУтгЫтггтглтг│тг╗
тбДтбМтбФтбЬтбдтбмтб┤тб╝тгДтгМтгФтгЬтгдтгмтг┤тг╝
тбЕтбНтбХтбЭтбетбнтб╡тб╜тгЕтгНтгХтгЭтгетгнтг╡тг╜
тбЖтбОтбЦтбЮтбжтботб╢тб╛тгЖтгОтгЦтгЮтгжтготг╢тг╛
тбЗтбПтбЧтбЯтбзтбптб╖тб┐тгЗтгПтгЧтгЯтгзтгптг╖тг┐

таа
та░
тв░orта╕
тв╕
тЦХ
тЦХ┬╖
тЦХтаЖ
тЦХтаЗorтбЖ
тЦХтбЗ
тЦХтЦН
тг┐я╕▓тг┐╠г╠З
тг┐я┐дтг┐
тг┐я╕░тг┐
тг┐я╕Щтг┐
тг┐тжЩтг┐
тГЫтг┐тЦХтг┐
тг┐тЦРтг┐
тг┐тЛотг┐
тг┐тБЭтг┐
тг┐тБЮтг┐
тг┐:тг┐
тг┐┬жтг┐
тг┐тФЖтг┐
тг┐тФКтг┐
тг┐тХОтг┐
тг┐тХПтг┐
тг┐тФЛтг┐
тг┐тБЮтг┐
тг┐тФЖтг┐тГУ
тг┐тФКтг┐
тг┐тАЦтг┐
тжА тжЩ
тг┐┬╖тг┐:тг┐я╕Щтг┐тИ╡тг┐тИ┤тг┐тГЮ
тв╕тжЩ┬╖тв╕:тв╕я╕Щтв╕тИ╡тв╕тИ┤тв╕
тв╕тжЩтбЗ┬╖тбЗ:тбЗя╕Щ╠гсЫмя╕ЩтбЗтИ╡тбЗтИ┤тбЗ
┬╖ :  тИ╡ ╠гтИ┤
я╕░ я╕Щ ╠ЗсЫм╠гсЫм
тЛо тБЭ тБЮ тЧМ
я╕▓ тБЦ тБШ тБЩ тБЫ
тАж тАжтГЫ тжЩтжЩтжЩтГитжЩтГитГЬтГТ [тжЩтжЩтжЩтГитжЩ]тГТ
тЛотжЩтГЫтГи


╠З╠З╠З╠З

 тБЦ тБШ тБЩ тБЫ
тЧМ

ЁЯБвЁЯВа ЁЯАЖ ЁЯАл ЁЯАХ ЁЯАШ ЁЯАЮ ЁЯАа ЁЯАб
ЁЭДЦ ЁЭДЧ ЁЭДШ ЁЭДЩ ЁЭДЪ ЁЭДЫ

тЪКтЪЛЁЭМА

тЪМтЪНтЪО
тЪПЁЭМБЁЭМВ
ЁЭМГЁЭМДЁЭМЕ

тШ░ тШ▒ тШ▓ тШ│
тШ┤ тШ╡ тШ╢ тШ╖

ф╖Аф╖Бф╖Вф╖Гф╖Дф╖Еф╖Жф╖З
ф╖Иф╖Йф╖Кф╖Лф╖Мф╖Нф╖Оф╖П
ф╖Рф╖Сф╖Тф╖Уф╖Фф╖Хф╖Цф╖Ч
ф╖Шф╖Щф╖Ъф╖Ыф╖Ьф╖Эф╖Юф╖Я
ф╖аф╖бф╖вф╖гф╖дф╖еф╖жф╖з
ф╖иф╖йф╖кф╖лф╖мф╖нф╖оф╖п
ф╖░ф╖▒ф╖▓ф╖│ф╖┤ф╖╡ф╖╢ф╖╖
ф╖╕ф╖╣ф╖║ф╖╗ф╖╝ф╖╜ф╖╛ф╖┐

ЁЭМЖЁЭМЗЁЭМИЁЭМЙЁЭМКЁЭМЛЁЭММЁЭМНЁЭМОЁЭМПЁЭМРЁЭМСЁЭМТЁЭМУЁЭМФЁЭМХЁЭМЦЁЭМЧЁЭМШЁЭМЩ
ЁЭМЪЁЭМЫЁЭМЬЁЭМЭЁЭМЮЁЭМЯЁЭМаЁЭМбЁЭМвЁЭМгЁЭМдЁЭМеЁЭМжЁЭМзЁЭМиЁЭМйЁЭМкЁЭМлЁЭМмЁЭМн
ЁЭМоЁЭМпЁЭМ░ЁЭМ▒ЁЭМ▓ЁЭМ│ЁЭМ┤ЁЭМ╡ЁЭМ╢ЁЭМ╖ЁЭМ╕ЁЭМ╣ЁЭМ║ЁЭМ╗ЁЭМ╝ЁЭМ╜ЁЭМ╛ЁЭМ┐ЁЭНАЁЭНБ
ЁЭНВЁЭНГЁЭНДЁЭНЕЁЭНЖЁЭНЗЁЭНИЁЭНЙЁЭНКЁЭНЛЁЭНМЁЭННЁЭНОЁЭНПЁЭНРЁЭНСЁЭНТЁЭНУЁЭНФЁЭНХЁЭНЦ

тЦС тЦТ тЦУ тЦИ
тЧМ
 тГШ
 тГЩ
 тГЪ
тж┐ тЧЙ тж╛ тЧМ тЧО тШЙ тГЭ тАв тЧж ЁЭЗЗ ЁЭЗИ тАвтГв  тЧжтГв  тАвтГг  тЧжтГг
тША тШ╝ тЪ╣ тКХ
тШ╛тШ╜ ЁЯМС ЁЯМТ ЁЯМУ ЁЯМФ ЁЯМХ ЁЯМЦ ЁЯМЧ ЁЯМШ
 ╠З ╠г сЫл
тАв╠г┬╖ ╠З╠гтАв

 ╠З╠г   тГШ

тЦд тЦе тЦж тЦз тЦи тЦй
тЪД
x╠г
тг┐╠А 	тг┐╠Б 	тг┐╠В 	тг┐╠Г 	тг┐╠Д 	тг┐╠Е 	тг┐╠Ж 	тг┐╠З 	тг┐╠И 	тг┐╠Й 	тг┐╠К 	тг┐╠Л 	тг┐╠М 	тг┐╠Н 	тг┐╠О 	тг┐╠П
тг┐╠Р 	тг┐╠С 	тг┐╠Т 	тг┐╠У 	тг┐╠Ф 	тг┐╠Х 	тг┐╠Ц 	тг┐╠Ч 	тг┐╠Ш 	тг┐╠Щ 	тг┐╠Ъ 	тг┐╠Ы 	тг┐╠Ь 	тг┐╠Э 	тг┐╠Ю 	тг┐╠Я
тг┐╠а 	тг┐╠б 	тг┐╠в 	тг┐╠г 	тг┐╠д 	тг┐╠е 	тг┐╠ж 	тг┐╠з 	тг┐╠и 	тг┐╠й 	тг┐╠к 	тг┐╠л 	тг┐╠м 	тг┐╠н 	тг┐╠о 	тг┐╠п
тг┐╠░ 	тг┐╠▒ 	тг┐╠▓ 	тг┐╠│ 	тг┐╠┤ 	тг┐╠╡ 	тг┐╠╢ 	тг┐╠╖ 	тг┐╠╕ 	тг┐╠╣ 	тг┐╠║ 	тг┐╠╗ 	тг┐╠╝ 	тг┐╠╜ 	тг┐╠╛ 	тг┐╠┐
тг┐═А 	тг┐═Б 	тг┐═В 	тг┐═Г 	тг┐═Д 	тг┐═Е 	тг┐═Ж 	тг┐═З 	тг┐═И 	тг┐═Й 	тг┐═К 	тг┐═Л 	тг┐═М 	тг┐═Н 	тг┐═О
тг┐═Р 	тг┐═С 	тг┐═Т 	тг┐═У 	тг┐═Ф 	тг┐═Х 	тг┐═Ц 	тг┐═Ч 	тг┐═Ш 	тг┐═Щ 	тг┐═Ъ 	тг┐═Ы 	тг┐═Ьтг┐ 	тг┐═Этг┐ 	тг┐═Ютг┐ 	тг┐═Ятг┐╠Е
 	тг┐═атг┐ 	тг┐═бтг┐ 	тг┐═втг┐ 	тг┐═г 	тг┐═д 	тг┐═е 	тг┐═ж 	тг┐═з 	тг┐═и 	тг┐═й 	тг┐═к 	тг┐═л 	тг┐═м 	тг┐═н
тг┐с╖А 	тг┐с╖Б 	тг┐с╖В 	тг┐с╖Г 	тг┐с╖Д 	тг┐с╖Е 	тг┐с╖Ж 	тг┐с╖З 	тг┐с╖И 	тг┐с╖Й 	тг┐с╖К 	тг┐с╖Л 	тг┐с╖М 	тг┐с╖Н 	тг┐с╖О 	тг┐с╖П
тг┐тГР 	тг┐тГС 	тг┐тГТ 	тг┐тГУ 	тг┐тГФ 	тг┐тГХ 	тг┐тГЦ 	тг┐тГЧ 	тг┐тГШ 	тг┐тГЩ 	тг┐тГЪ 	тг┐тГЫ 	тг┐тГЬ 	тг┐тГЭ 	тг┐тГЮ 	тг┐тГЯ
тг┐тГа 	тг┐тГб 	тг┐тГв 	тг┐тГг 	тг┐тГд 	тг┐тГе 	тг┐тГж 	тг┐тГз 	тг┐ 	тг┐тГй 	тг┐тГк 	тг┐тГл 	тг┐тГм 	тг┐тГн 	тг┐тГо 	тг┐тГп
тг┐тГ░ 	тг┐с╖У 	тг┐с╖Ф 	тг┐с╖Х 	тг┐с╖Ц 	тг┐с╖Ч 	тг┐с╖Ш 	тг┐с╖Щ 	тг┐с╖Ъ 	тг┐с╖Ы 	тг┐с╖Ь 	тг┐с╖Э 	тг┐с╖Ю 	тг┐с╖Я  	тг┐═о 	тг┐═п
тг┐с╖а 	тг┐с╖б 	тг┐с╖в 	тг┐с╖г 	тг┐с╖д 	тг┐с╖е 	тг┐с╖ж 	тг┐с╖╝ 	тг┐с╖╜ 	тг┐с╖╛ 	тг┐с╖┐
тг┐я╕а 	тг┐я╕б 	тг┐я╕в 	тг┐я╕г 	тг┐я╕д 	тг┐я╕е 	тг┐я╕ж

Combining Charс╖Нacters:
таАтГР 	таАтГС 	таАтГТ 	таАтГУ 	таАтГФ 	таАтГХ 	таАтГЦ 	таАтГЧ 	таАтГШ 	таАтГЩ 	таАтГЪ 	таАтГЫ 	таАтГЬ 	таАтГЭ 	таАтГЮ 	таАтГЯ
таАтГа 	таАтГб 	таАтГв 	таАтГг 	таАтГд 	таАтГе 	таАтГж 	таАтГз 	таАтГи 	таАтГй 	таАтГк 	таАтГл 	таАтГм 	таАтГн 	таАтГо 	таАтГп
таАтГ░
тж╛
*/


//  val braille:immutable.TreeMap[Int, String] = immutable.TreeMap[Int, String](
//    0 -> "таА", 0 + (1 << 4) -> "таИ", 0 + (2 << 4) -> "таР", 0 + (3 << 4) -> "таШ", 0 + (4 << 4) -> "таа", 0 + (5 << 4) -> "таи", 0 + (6 << 4) -> "та░", 0 + (7 << 4) -> "та╕", 0 + (8 << 4) -> "твА", 0 + (9 << 4) -> "твИ", 0 + (10 << 4) -> "твР", 0 + (11 << 4) -> "твШ", 0 + (12 << 4) -> "тва", 0 + (13 << 4) -> "тви", 0 + (14 << 4) -> "тв░", 0 + (15 << 4) -> "тв╕",
//    1 -> "таБ", 1 + (1 << 4) -> "таЙ", 1 + (2 << 4) -> "таС", 1 + (3 << 4) -> "таЩ", 1 + (4 << 4) -> "таб", 1 + (5 << 4) -> "тай", 1 + (6 << 4) -> "та▒", 1 + (7 << 4) -> "та╣", 1 + (8 << 4) -> "твБ", 1 + (9 << 4) -> "твЙ", 1 + (10 << 4) -> "твС", 1 + (11 << 4) -> "твЩ", 1 + (12 << 4) -> "тва", 1 + (13 << 4) -> "твй", 1 + (14 << 4) -> "тв▒", 1 + (15 << 4) -> "тв╣",
//    2 -> "таВ", 2 + (1 << 4) -> "таК", 2 + (2 << 4) -> "таТ", 2 + (3 << 4) -> "таЪ", 2 + (4 << 4) -> "тав", 2 + (5 << 4) -> "так", 2 + (6 << 4) -> "та▓", 2 + (7 << 4) -> "та║", 2 + (8 << 4) -> "твВ", 2 + (9 << 4) -> "твК", 2 + (10 << 4) -> "твТ", 2 + (11 << 4) -> "твЪ", 2 + (12 << 4) -> "твв", 2 + (13 << 4) -> "твк", 2 + (14 << 4) -> "тв▓", 2 + (15 << 4) -> "тв║",
//    3 -> "таГ", 3 + (1 << 4) -> "таЛ", 3 + (2 << 4) -> "таУ", 3 + (3 << 4) -> "таЫ", 3 + (4 << 4) -> "таг", 3 + (5 << 4) -> "тал", 3 + (6 << 4) -> "та│", 3 + (7 << 4) -> "та╗", 3 + (8 << 4) -> "твГ", 3 + (9 << 4) -> "твЛ", 3 + (10 << 4) -> "твУ", 3 + (11 << 4) -> "твЫ", 3 + (12 << 4) -> "твг", 3 + (13 << 4) -> "твл", 3 + (14 << 4) -> "тв│", 3 + (15 << 4) -> "тв╗",
//    4 -> "таД", 4 + (1 << 4) -> "таМ", 4 + (2 << 4) -> "таФ", 4 + (3 << 4) -> "таЬ", 4 + (4 << 4) -> "тад", 4 + (5 << 4) -> "там", 4 + (6 << 4) -> "та┤", 4 + (7 << 4) -> "та╝", 4 + (8 << 4) -> "твД", 4 + (9 << 4) -> "твМ", 4 + (10 << 4) -> "твФ", 4 + (11 << 4) -> "твЬ", 4 + (12 << 4) -> "твд", 4 + (13 << 4) -> "твм", 4 + (14 << 4) -> "тв┤", 4 + (15 << 4) -> "тв╝",
//    5 -> "таЕ", 5 + (1 << 4) -> "таН", 5 + (2 << 4) -> "таХ", 5 + (3 << 4) -> "таЭ", 5 + (4 << 4) -> "тае", 5 + (5 << 4) -> "тан", 5 + (6 << 4) -> "та╡", 5 + (7 << 4) -> "та╜", 5 + (8 << 4) -> "твЕ", 5 + (9 << 4) -> "твН", 5 + (10 << 4) -> "твХ", 5 + (11 << 4) -> "твЭ", 5 + (12 << 4) -> "тве", 5 + (13 << 4) -> "твн", 5 + (14 << 4) -> "тв╡", 5 + (15 << 4) -> "тв╜",
//    6 -> "таЖ", 6 + (1 << 4) -> "таО", 6 + (2 << 4) -> "таЦ", 6 + (3 << 4) -> "таЮ", 6 + (4 << 4) -> "таж", 6 + (5 << 4) -> "тао", 6 + (6 << 4) -> "та╢", 6 + (7 << 4) -> "та╛", 6 + (8 << 4) -> "твЖ", 6 + (9 << 4) -> "твО", 6 + (10 << 4) -> "твЦ", 6 + (11 << 4) -> "твЮ", 6 + (12 << 4) -> "твж", 6 + (13 << 4) -> "тво", 6 + (14 << 4) -> "тв╢", 6 + (15 << 4) -> "тв╛",
//    7 -> "таЗ", 7 + (1 << 4) -> "таП", 7 + (2 << 4) -> "таЧ", 7 + (3 << 4) -> "таЯ", 7 + (4 << 4) -> "таз", 7 + (5 << 4) -> "тап", 7 + (6 << 4) -> "та╖", 7 + (7 << 4) -> "та┐", 7 + (8 << 4) -> "твЗ", 7 + (9 << 4) -> "твП", 7 + (10 << 4) -> "твЧ", 7 + (11 << 4) -> "твЯ", 7 + (12 << 4) -> "твз", 7 + (13 << 4) -> "твп", 7 + (14 << 4) -> "тв╖", 7 + (15 << 4) -> "тв┐",
//    8 -> "тбА", 8 + (1 << 4) -> "тбИ", 8 + (2 << 4) -> "тбР", 8 + (3 << 4) -> "тбШ", 8 + (4 << 4) -> "тба", 8 + (5 << 4) -> "тби", 8 + (6 << 4) -> "тб░", 8 + (7 << 4) -> "тб╕", 8 + (8 << 4) -> "тгА", 8 + (9 << 4) -> "тгИ", 8 + (10 << 4) -> "тгР", 8 + (11 << 4) -> "тгШ", 8 + (12 << 4) -> "тга", 8 + (13 << 4) -> "тги", 8 + (14 << 4) -> "тг░", 8 + (15 << 4) -> "тг╕",
//    9 -> "тбБ", 9 + (1 << 4) -> "тбЙ", 9 + (2 << 4) -> "тбС", 9 + (3 << 4) -> "тбЩ", 9 + (4 << 4) -> "тбб", 9 + (5 << 4) -> "тбй", 9 + (6 << 4) -> "тб▒", 9 + (7 << 4) -> "тб╣", 9 + (8 << 4) -> "тгБ", 9 + (9 << 4) -> "тгЙ", 9 + (10 << 4) -> "тгС", 9 + (11 << 4) -> "тгЩ", 9 + (12 << 4) -> "тгб", 9 + (13 << 4) -> "тгй", 9 + (14 << 4) -> "тг▒", 9 + (15 << 4) -> "тг╣",
//    10 -> "тбВ", 10 + (1 << 4) -> "тбК", 10 + (2 << 4) -> "тбТ", 10 + (3 << 4) -> "тбЪ", 10 + (4 << 4) -> "тбв", 10 + (5 << 4) -> "тбк", 10 + (6 << 4) -> "тб▓", 10 + (7 << 4) -> "тб║", 10 + (8 << 4) -> "тгВ", 10 + (9 << 4) -> "тгК", 10 + (10 << 4) -> "тгТ", 10 + (11 << 4) -> "тгЪ", 10 + (12 << 4) -> "тгв", 10 + (13 << 4) -> "тгк", 10 + (14 << 4) -> "тг▓", 10 + (15 << 4) -> "тг║",
//    11 -> "тбГ", 11 + (1 << 4) -> "тбЛ", 11 + (2 << 4) -> "тбУ", 11 + (3 << 4) -> "тбЫ", 11 + (4 << 4) -> "тбг", 11 + (5 << 4) -> "тбл", 11 + (6 << 4) -> "тб│", 11 + (7 << 4) -> "тб╗", 11 + (8 << 4) -> "тгГ", 11 + (9 << 4) -> "тгЛ", 11 + (10 << 4) -> "тгУ", 11 + (11 << 4) -> "тгЫ", 11 + (12 << 4) -> "тгг", 11 + (13 << 4) -> "тгл", 11 + (14 << 4) -> "тг│", 11 + (15 << 4) -> "тг╗",
//    12 -> "тбД", 12 + (1 << 4) -> "тбМ", 12 + (2 << 4) -> "тбФ", 12 + (3 << 4) -> "тбЬ", 12 + (4 << 4) -> "тбд", 12 + (5 << 4) -> "тбм", 12 + (6 << 4) -> "тб┤", 12 + (7 << 4) -> "тб╝", 12 + (8 << 4) -> "тгД", 12 + (9 << 4) -> "тгМ", 12 + (10 << 4) -> "тгФ", 12 + (11 << 4) -> "тгЬ", 12 + (12 << 4) -> "тгд", 12 + (13 << 4) -> "тгм", 12 + (14 << 4) -> "тг┤", 12 + (15 << 4) -> "тг╝",
//    13 -> "тбЕ", 13 + (1 << 4) -> "тбН", 13 + (2 << 4) -> "тбХ", 13 + (3 << 4) -> "тбЭ", 13 + (4 << 4) -> "тбе", 13 + (5 << 4) -> "тбн", 13 + (6 << 4) -> "тб╡", 13 + (7 << 4) -> "тб╜", 13 + (8 << 4) -> "тгЕ", 13 + (9 << 4) -> "тгН", 13 + (10 << 4) -> "тгХ", 13 + (11 << 4) -> "тгЭ", 13 + (12 << 4) -> "тге", 13 + (13 << 4) -> "тгн", 13 + (14 << 4) -> "тг╡", 13 + (15 << 4) -> "тг╜",
//    14 -> "тбЖ", 14 + (1 << 4) -> "тбО", 14 + (2 << 4) -> "тбЦ", 14 + (3 << 4) -> "тбЮ", 14 + (4 << 4) -> "тбж", 14 + (5 << 4) -> "тбо", 14 + (6 << 4) -> "тб╢", 14 + (7 << 4) -> "тб╛", 14 + (8 << 4) -> "тгЖ", 14 + (9 << 4) -> "тгО", 14 + (10 << 4) -> "тгЦ", 14 + (11 << 4) -> "тгЮ", 14 + (12 << 4) -> "тгж", 14 + (13 << 4) -> "тго", 14 + (14 << 4) -> "тг╢", 14 + (15 << 4) -> "тг╛",
//    15 -> "тбЗ", 15 + (1 << 4) -> "тбП", 15 + (2 << 4) -> "тбЧ", 15 + (3 << 4) -> "тбЯ", 15 + (4 << 4) -> "тбз", 15 + (5 << 4) -> "тбп", 15 + (6 << 4) -> "тб╖", 15 + (7 << 4) -> "тб┐", 15 + (8 << 4) -> "тгЗ", 15 + (9 << 4) -> "тгП", 15 + (10 << 4) -> "тгЧ", 15 + (11 << 4) -> "тгЯ", 15 + (12 << 4) -> "тгз", 15 + (13 << 4) -> "тгп", 15 + (14 << 4) -> "тг╖", 15 + (15 << 4) -> "тг┐"
//  )
//
//  for ((k, v) <- braille) print(s"\"$v\", ")